plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'org.sjsu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	reports {
		html.required = true
		xml.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/sjsu/booktable/dto/**',
					'com/sjsu/booktable/exception/**',
					'com/sjsu/booktable/controller/**',
					'com/sjsu/booktable/config/**',
					'com/sjsu/booktable/model/**',
					'com/sjsu/booktable/BookTableLauncher.java',
					'com/sjsu/booktable/utils/**',
					'com/sjsu/booktable/repository/**',
					'com/sjsu/booktable/mappers/**',
			])
		}))
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' // For JWT validation
	implementation 'com.amazonaws:aws-java-sdk-cognitoidp:1.12.538' // Cognito SDK
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.538' // S3 SDK
	implementation 'com.google.maps:google-maps-services:2.0.0' // Google Maps Integration
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway-mvc'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.3  // Require 70% coverage
			}
		}
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'com/sjsu/booktable/dto/**',
				'com/sjsu/booktable/exception/**',
				'com/sjsu/booktable/controller/**',
				'com/sjsu/booktable/config/**',
				'com/sjsu/booktable/model/**',
				'com/sjsu/booktable/BookTableLauncher.java',
				'com/sjsu/booktable/utils/**',
				'com/sjsu/booktable/repository/**',
				'com/sjsu/booktable/mappers/**',
			])
		}))
	}
}

check.dependsOn jacocoTestCoverageVerification